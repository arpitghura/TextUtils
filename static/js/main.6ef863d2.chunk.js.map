{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","id","type","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","length","split","Alert","alert","role","word","lower","charAt","slice","captalize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"4MAKe,SAASA,EAAOC,GAC3B,OACE,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACE,sBAAKD,UAAU,kBAAf,UAEE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SAAsCH,EAAMI,QAK5C,sBAAKH,UAAU,GAAGI,GAAG,yBAArB,UACE,oBAAIJ,UAAU,kCAAd,SACE,oBAAIA,UAAU,eAYhB,sBAAKA,UAAS,2DAAqE,UAAfD,EAAME,KAAiB,OAAO,SAAlG,UACE,uBAAOD,UAAU,mBAAmBK,KAAK,WAAWC,QAASP,EAAMQ,WAAYH,GAAG,2BAClF,uBAAOJ,UAAU,mBAAmBQ,QAAQ,yBAA5C,kCC7BC,SAASC,EAASV,GAC7B,IAmCA,EAAwBW,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAGA,OACI,qCACA,sBAAKZ,UAAU,YAAYa,MAAO,CAACC,MAAsB,SAAff,EAAME,KAAgB,QAAQ,SAAxE,UACI,6BAAKF,EAAMgB,UACX,qBAAKf,UAAU,OAAf,SACA,0BAAUA,UAAU,eAAegB,MAAQL,EAAMM,SAblC,SAACC,GAEpBN,EAAQM,EAAMC,OAAOH,QAW0DH,MAAO,CAACO,gBAAgC,SAAfrB,EAAME,KAAgB,QAAQ,QAAQa,MAAsB,SAAff,EAAME,KAAgB,QAAQ,SAAUG,GAAG,QAAQiB,KAAK,QAEzM,wBAAQrB,UAAU,4BAA4BM,QA7ChC,WAElB,IAAIgB,EAAUX,EAAKY,cACnBX,EAAQU,GACRvB,EAAMyB,UAAU,0BAA2B,YAyCvC,kCACA,wBAAQxB,UAAU,4BAA4BM,QAxC9B,WACpB,IAAIgB,EAAUX,EAAKc,cACnBb,EAAQU,GACRvB,EAAMyB,UAAU,0BAA2B,YAqCvC,kCACA,wBAAQxB,UAAU,4BAA4BM,QApC7B,WAErBM,EADc,IAEdb,EAAMyB,UAAU,eAAgB,YAiC5B,wBACA,wBAAQxB,UAAU,4BAA4BM,QAhCnC,WACf,IAAIK,EAAOe,SAASC,eAAe,SACnChB,EAAKiB,SACLC,UAAUC,UAAUC,UAAUpB,EAAKK,OACnCjB,EAAMyB,UAAU,2BAA4B,YA4BxC,0BAEJ,sBAAKxB,UAAU,iBAAiBa,MAAO,CAACC,MAAsB,SAAff,EAAME,KAAgB,QAAQ,SAA7E,UACI,mDACA,8BAAIU,EAAKqB,OAAT,mBAAiCrB,EAAKsB,MAAM,KAAKD,OAAjD,YACA,+CAAkB,KAAQrB,EAAKsB,MAAM,KAAKD,OAA1C,cACA,8CACA,4BAAIrB,EAAKqB,OAAO,EAAErB,EAAK,kECxDpB,SAASuB,EAAMnC,GAK1B,OACIA,EAAMoC,OAAS,sBAAKnC,UAAS,sBAAiBD,EAAMoC,MAAM9B,KAA7B,+CAAgF+B,KAAK,QAAnG,UACf,mCANc,SAACC,GACf,IAAMC,EAASD,EAAKZ,cACpB,OAAOa,EAAMC,OAAO,GAAGhB,cAAgBe,EAAME,MAAM,GAI1CC,CAAU1C,EAAMoC,MAAM9B,MAA/B,OADe,KACmCN,EAAMoC,MAAMO,OFqCrE5C,EAAO6C,aAAe,CACpBxC,MAAO,YACPyC,UAAW,SGaCC,MAhDf,WACE,MAAwBnC,mBAAS,SAAjC,mBAAOT,EAAP,KAAa6C,EAAb,KACA,EAA0BpC,mBAAS,MAAnC,mBAAOyB,EAAP,KAAcY,EAAd,KAEMvB,EAAY,SAACwB,EAAS3C,GACxB0C,EAAS,CACPL,IAAMM,EACP3C,KAAOA,IAER4C,YAAW,WACPF,EAAS,QACV,OAeP,OACE,qCAEA,cAACjD,EAAD,CAAQG,KAAMA,EAAMM,WAhBH,WACJ,UAATN,GACF6C,EAAQ,QACRpB,SAASwB,KAAKrC,MAAMO,gBAAkB,UACtCI,EAAU,6BAA6B,aAGvCsB,EAAQ,SACRpB,SAASwB,KAAKrC,MAAMO,gBAAkB,QACtCI,EAAU,8BAA8B,eAQ1C,cAACU,EAAD,CAAOC,MAAOA,IACd,qBAAKnC,UAAU,iBAAf,SAQM,cAACS,EAAD,CAAUe,UAAWA,EAAWT,QAAQ,8BAA8Bd,KAAMA,UCxCvEkD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpC,SAASC,eAAe,SAM1BwB,K","file":"static/js/main.6ef863d2.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\" >\r\n          {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          {/* <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button> */}\r\n          {/* <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"> */}\r\n          <div className=\"\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a> */}\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li> */}\r\n            </ul>\r\n            {/* <form className=\"d-flex col-12 col-md-7 col-lg-3\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className={`btn btn-outline-${props.mode === 'light'?'dark':'light'}`} type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch mx-lg-3 my-3 my-lg-0 text-${props.mode === 'light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\n//Props Types & Required Use\r\n  Navbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText:PropTypes.string\r\n  }\r\n\r\n//Default Props\r\n Navbar.defaultProps = {\r\n   title: \"TextUtils\",\r\n   aboutText: \"About\"\r\n } \r\n","import React, { useState }  from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"Uppercase was clicked \" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Upper Case\", \"success\");\r\n    }\r\n    const handleDownClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lower Case\", \"success\");\r\n    }\r\n    const handleClearClick = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared\", \"success\");\r\n    }\r\n    const handleCopy = () => {\r\n        let text = document.getElementById(\"mybox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text Copied to Clipboard\", \"success\");\r\n    }\r\n    // const handleCapitalClick = () => {\r\n    //     // let str = text.toString();\r\n    //     // let newText =  str.charAt(0).toUpperCase() + str.substring(1);\r\n    //     // setText(newText);\r\n    //     // document.getElementById(\"mybox\").classList.add('first-letter-uppercase');\r\n    // }\r\n\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"OnChange\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState(\"\");\r\n    // text = \"new text\"; // wrong way to change the state\r\n    // setText(\"new text\"); //correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n            <h2>{props.heading}</h2>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value ={text} onChange={handleOnChange} style={{backgroundColor: props.mode === 'dark'?'#5566':'white',color: props.mode === 'dark'?'white':'black'}} id=\"mybox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={handleDownClick}>Convert To Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n            <h1>Your Text Summary</h1>\r\n            <p>{text.length} Characters and {text.split(\" \").length} Words</p>\r\n            <p>Reading Time: {0.008 * text.split(\" \").length} Minutes</p>\r\n            <h2>Text Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const captalize = (word)=>{\r\n        const lower =  word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show container py-2`} role=\"alert\">\r\n        <strong>{captalize(props.alert.type)} </strong>: {props.alert.msg}</div> \r\n    )\r\n}\r\n","import './App.css';\n// import About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './Components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n      setAlert({\n        msg : message,\n    \t  type : type\n      })\n      setTimeout(() => {\n          setAlert(null)\n      }, 1500);\n  }\n  const toggleMode = () =>{\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark Mode has been enabled\",\"success\");\n      // document.title = 'TextUtils - Dark Mode'; // Change Title Dynamically\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been enabled\",\"success\");\n    }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    {/* /users --> Component 1\n      \t/users/home --> Component 2 */}\n    {/* <Switch> */}\n          {/* <Route exact path=\"/about\"> \n            <About />\n          </Route> */}\n          {/* <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter Text Below to Analyse\" mode={mode}/>\n          {/* </Route> */}\n    {/* </Switch> */}\n    </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}